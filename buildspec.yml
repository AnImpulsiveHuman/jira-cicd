version: 0.2
env:
  secrets-manager:
   SNYK: snyk:snykapi
   AUTH: JIRA:mail-api
  variables:
   U: "https://vishalpranav.atlassian.net/rest/api/3/issue"
   H1: "Accept:application/json"
   H2: "Content-Type:application/json"
phases:
  install:
    runtime-versions:
      docker: 19
  pre_build:
    commands:
      # Logging in to ECR
      - echo Logging in to Amazon ECR...
      # Installing checkov - Scan CF templates
      - echo "Installing checkov"
      - pip install checkov
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=071460744267.dkr.ecr.us-east-1.amazonaws.com/test/snyk
      # Storing the commit hash
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
       # Installing NPM Dependencies
      - echo Installing NPM dependencies
      - npm install
      # Downloading Snyk
      - echo Install Snyk
      - curl -Lo ./snyk "https://github.com/snyk/snyk/releases/download/v1.210.0/snyk-linux"
      - chmod -R +x ./snyk
      # Snyk auth
      - ./snyk config set api="$SNYK"
  build:
    commands:
     
      - echo Build started on `date`
      # Scanning CF templates
      - echo Running checkov
      - checkov -d cf-templates/*
      - echo Building the Docker image....
      # Building the image and scanning the dependencies with with Snyk
      - docker build --build-arg snyk_auth_token=$SNYK -t $REPOSITORY_URI:latest .
      # Scanning the built dockerfile and the base image.
      - echo Running Snyk
      - ./snyk test --docker $REPOSITORY_URI:latest --file=Dockerfile
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      # Check if the build stage is successful
      - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then
         curl --request POST --url $U --user $AUTH --header $H1 --header $H2 --data '{"fields":{"summary":"CodeBuild - Build Failed","issuetype":{"name":"Bug"},"project":{"key":"TCP"},"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"text":"Build ID:'$CODEBUILD_BUILD_ID' \n Build Number:'$CODEBUILD_BUILD_NUMBER'","type":"text"}]}]}}}';exit 1;
        fi"
      #- curl --request POST --url $U --user $AUTH --header $H1 --header $H2 --data '{"fields":{"summary":"CodeBuild - Build Failed","issuetype":{"name":"Bug"},"project":{"key":"TCP"},"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"text":"Build ID:'$CODEBUILD_BUILD_ID' \n Build Number:'$CODEBUILD_BUILD_NUMBER'","type":"text"}]}]}}}'
      #- echo Build completed on `date`
      # Pushing the image to ECR.
      #- echo Pushing the Docker images...
      #- docker push $REPOSITORY_URI:latest
      #- docker push $REPOSITORY_URI:$IMAGE_TAG
